name: Go

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      VIPS_VERSION: 8.16.0
      VIPS_URL: https://github.com/libvips/libvips/releases/download
      HEIF_VERSION: 1.19.5
      HEIF_URL: https://github.com/strukturag/libheif/releases/download
    steps:
        - uses: actions/checkout@v3

        - name: Set up Go
          uses: actions/setup-go@v4
          with:
            go-version: '1.24'
            cache-dependency-path: go.sum

        - name: Install build utils
          run: |
            sudo apt-get update
            sudo apt-get install -y software-properties-common build-essential pkg-config git

        - name: Install libvips dependencies
          # libaom-dev - AV1 Video Codec Library
          # libheif-dev = HEIF file format decoder
          # see https://github.com/jcupitt/docker-builds/blob/master/libvips-ubuntu18.04/Dockerfile
          run: |
            sudo apt-get update
            sudo apt-get install -y meson ninja-build wget
            sudo apt-get install -y libglib2.0-dev libexpat1-dev librsvg2-dev libpng-dev libgif-dev libjpeg-dev libtiff-dev libexif-dev liblcms2-dev liborc-dev libffi-dev
            sudo apt-get install -y libaom-dev ffmpeg

        - name: Install libheif dependencies
          run: |
            sudo apt-get install -y cmake libaom-dev libdav1d-dev libx265-dev libyaml-cpp-dev libssl-dev libde265-dev libx264-dev

        # Set environment variables to prioritize custom libraries, otherwise libvips will be linked to a wrong version of libheif
        - name: Set environment variables
          run: |
            echo "LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

        - name: Build libheif from source
          run: |
            mkdir -p /tmp/libheif
            cd /tmp/libheif
            wget ${HEIF_URL}/v${HEIF_VERSION}/libheif-${HEIF_VERSION}.tar.gz \
              && tar -xf libheif-${HEIF_VERSION}.tar.gz \
              && cd libheif-${HEIF_VERSION} \
              && mkdir build \
              && cd build \
              && cmake --preset=release .. \
              && make -j$(nproc) \
              && sudo make install

        - name: Build libvips from source
          run: |
            mkdir -p /tmp/vips
            cd /tmp/vips
            wget ${VIPS_URL}/v${VIPS_VERSION}/vips-${VIPS_VERSION}.tar.xz \
              && tar -xf vips-${VIPS_VERSION}.tar.xz \
              && cd vips-${VIPS_VERSION} \
              && meson setup build --prefix=/usr \
              && meson compile -C build \
              && sudo meson install -C build

        - name: Verify vips and ffmpeg installation
          run: |
            heif-convert --version
            vips --version
            ffmpeg -version

        - name: Build Converter
          run: go build -o ./bin/ -v ./...

        - name: Test Converter
          run: go test -v ./...

  linter:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: false
      - name: golangci-lint converter
        uses: golangci/golangci-lint-action@v8
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v2.1

          # Optional: working directory, useful for monorepos
          # working-directory: ./subdir

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          args: --timeout=30m --config=./.golangci.pipeline.yaml --issues-exit-code=0

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"