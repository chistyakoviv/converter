// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/chistyakoviv/converter/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockConversionQueueService is an autogenerated mock type for the ConversionQueueService type
type MockConversionQueueService struct {
	mock.Mock
}

type MockConversionQueueService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConversionQueueService) EXPECT() *MockConversionQueueService_Expecter {
	return &MockConversionQueueService_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, info
func (_m *MockConversionQueueService) Add(ctx context.Context, info *model.ConversionInfo) (int64, error) {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ConversionInfo) (int64, error)); ok {
		return rf(ctx, info)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.ConversionInfo) int64); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.ConversionInfo) error); ok {
		r1 = rf(ctx, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConversionQueueService_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockConversionQueueService_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - info *model.ConversionInfo
func (_e *MockConversionQueueService_Expecter) Add(ctx interface{}, info interface{}) *MockConversionQueueService_Add_Call {
	return &MockConversionQueueService_Add_Call{Call: _e.mock.On("Add", ctx, info)}
}

func (_c *MockConversionQueueService_Add_Call) Run(run func(ctx context.Context, info *model.ConversionInfo)) *MockConversionQueueService_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.ConversionInfo))
	})
	return _c
}

func (_c *MockConversionQueueService_Add_Call) Return(_a0 int64, _a1 error) *MockConversionQueueService_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConversionQueueService_Add_Call) RunAndReturn(run func(context.Context, *model.ConversionInfo) (int64, error)) *MockConversionQueueService_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, fullpath
func (_m *MockConversionQueueService) Get(ctx context.Context, fullpath string) (*model.Conversion, error) {
	ret := _m.Called(ctx, fullpath)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Conversion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Conversion, error)); ok {
		return rf(ctx, fullpath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Conversion); ok {
		r0 = rf(ctx, fullpath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Conversion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fullpath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConversionQueueService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockConversionQueueService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - fullpath string
func (_e *MockConversionQueueService_Expecter) Get(ctx interface{}, fullpath interface{}) *MockConversionQueueService_Get_Call {
	return &MockConversionQueueService_Get_Call{Call: _e.mock.On("Get", ctx, fullpath)}
}

func (_c *MockConversionQueueService_Get_Call) Run(run func(ctx context.Context, fullpath string)) *MockConversionQueueService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConversionQueueService_Get_Call) Return(_a0 *model.Conversion, _a1 error) *MockConversionQueueService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConversionQueueService_Get_Call) RunAndReturn(run func(context.Context, string) (*model.Conversion, error)) *MockConversionQueueService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsCanceled provides a mock function with given fields: ctx, fullpath, code
func (_m *MockConversionQueueService) MarkAsCanceled(ctx context.Context, fullpath string, code uint32) error {
	ret := _m.Called(ctx, fullpath, code)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsCanceled")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint32) error); ok {
		r0 = rf(ctx, fullpath, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConversionQueueService_MarkAsCanceled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsCanceled'
type MockConversionQueueService_MarkAsCanceled_Call struct {
	*mock.Call
}

// MarkAsCanceled is a helper method to define mock.On call
//   - ctx context.Context
//   - fullpath string
//   - code uint32
func (_e *MockConversionQueueService_Expecter) MarkAsCanceled(ctx interface{}, fullpath interface{}, code interface{}) *MockConversionQueueService_MarkAsCanceled_Call {
	return &MockConversionQueueService_MarkAsCanceled_Call{Call: _e.mock.On("MarkAsCanceled", ctx, fullpath, code)}
}

func (_c *MockConversionQueueService_MarkAsCanceled_Call) Run(run func(ctx context.Context, fullpath string, code uint32)) *MockConversionQueueService_MarkAsCanceled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint32))
	})
	return _c
}

func (_c *MockConversionQueueService_MarkAsCanceled_Call) Return(_a0 error) *MockConversionQueueService_MarkAsCanceled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConversionQueueService_MarkAsCanceled_Call) RunAndReturn(run func(context.Context, string, uint32) error) *MockConversionQueueService_MarkAsCanceled_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsDone provides a mock function with given fields: ctx, fullpath
func (_m *MockConversionQueueService) MarkAsDone(ctx context.Context, fullpath string) error {
	ret := _m.Called(ctx, fullpath)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsDone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, fullpath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConversionQueueService_MarkAsDone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsDone'
type MockConversionQueueService_MarkAsDone_Call struct {
	*mock.Call
}

// MarkAsDone is a helper method to define mock.On call
//   - ctx context.Context
//   - fullpath string
func (_e *MockConversionQueueService_Expecter) MarkAsDone(ctx interface{}, fullpath interface{}) *MockConversionQueueService_MarkAsDone_Call {
	return &MockConversionQueueService_MarkAsDone_Call{Call: _e.mock.On("MarkAsDone", ctx, fullpath)}
}

func (_c *MockConversionQueueService_MarkAsDone_Call) Run(run func(ctx context.Context, fullpath string)) *MockConversionQueueService_MarkAsDone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConversionQueueService_MarkAsDone_Call) Return(_a0 error) *MockConversionQueueService_MarkAsDone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConversionQueueService_MarkAsDone_Call) RunAndReturn(run func(context.Context, string) error) *MockConversionQueueService_MarkAsDone_Call {
	_c.Call.Return(run)
	return _c
}

// Pop provides a mock function with given fields: ctx
func (_m *MockConversionQueueService) Pop(ctx context.Context) (*model.Conversion, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Pop")
	}

	var r0 *model.Conversion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*model.Conversion, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *model.Conversion); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Conversion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConversionQueueService_Pop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pop'
type MockConversionQueueService_Pop_Call struct {
	*mock.Call
}

// Pop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConversionQueueService_Expecter) Pop(ctx interface{}) *MockConversionQueueService_Pop_Call {
	return &MockConversionQueueService_Pop_Call{Call: _e.mock.On("Pop", ctx)}
}

func (_c *MockConversionQueueService_Pop_Call) Run(run func(ctx context.Context)) *MockConversionQueueService_Pop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConversionQueueService_Pop_Call) Return(_a0 *model.Conversion, _a1 error) *MockConversionQueueService_Pop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConversionQueueService_Pop_Call) RunAndReturn(run func(context.Context) (*model.Conversion, error)) *MockConversionQueueService_Pop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConversionQueueService creates a new instance of MockConversionQueueService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConversionQueueService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConversionQueueService {
	mock := &MockConversionQueueService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
