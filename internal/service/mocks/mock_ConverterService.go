// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/chistyakoviv/converter/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockConverterService is an autogenerated mock type for the ConverterService type
type MockConverterService struct {
	mock.Mock
}

type MockConverterService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConverterService) EXPECT() *MockConverterService_Expecter {
	return &MockConverterService_Expecter{mock: &_m.Mock}
}

// Convert provides a mock function with given fields: ctx, info
func (_m *MockConverterService) Convert(ctx context.Context, info *model.Conversion) error {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Conversion) error); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConverterService_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type MockConverterService_Convert_Call struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - ctx context.Context
//   - info *model.Conversion
func (_e *MockConverterService_Expecter) Convert(ctx interface{}, info interface{}) *MockConverterService_Convert_Call {
	return &MockConverterService_Convert_Call{Call: _e.mock.On("Convert", ctx, info)}
}

func (_c *MockConverterService_Convert_Call) Run(run func(ctx context.Context, info *model.Conversion)) *MockConverterService_Convert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Conversion))
	})
	return _c
}

func (_c *MockConverterService_Convert_Call) Return(_a0 error) *MockConverterService_Convert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConverterService_Convert_Call) RunAndReturn(run func(context.Context, *model.Conversion) error) *MockConverterService_Convert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConverterService creates a new instance of MockConverterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConverterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConverterService {
	mock := &MockConverterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
