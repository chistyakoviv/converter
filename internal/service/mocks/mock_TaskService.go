// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTaskService is an autogenerated mock type for the TaskService type
type MockTaskService struct {
	mock.Mock
}

type MockTaskService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskService) EXPECT() *MockTaskService_Expecter {
	return &MockTaskService_Expecter{mock: &_m.Mock}
}

// IsScanning provides a mock function with no fields
func (_m *MockTaskService) IsScanning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsScanning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTaskService_IsScanning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsScanning'
type MockTaskService_IsScanning_Call struct {
	*mock.Call
}

// IsScanning is a helper method to define mock.On call
func (_e *MockTaskService_Expecter) IsScanning() *MockTaskService_IsScanning_Call {
	return &MockTaskService_IsScanning_Call{Call: _e.mock.On("IsScanning")}
}

func (_c *MockTaskService_IsScanning_Call) Run(run func()) *MockTaskService_IsScanning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaskService_IsScanning_Call) Return(_a0 bool) *MockTaskService_IsScanning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskService_IsScanning_Call) RunAndReturn(run func() bool) *MockTaskService_IsScanning_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessQueues provides a mock function with given fields: ctx
func (_m *MockTaskService) ProcessQueues(ctx context.Context) {
	_m.Called(ctx)
}

// MockTaskService_ProcessQueues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessQueues'
type MockTaskService_ProcessQueues_Call struct {
	*mock.Call
}

// ProcessQueues is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTaskService_Expecter) ProcessQueues(ctx interface{}) *MockTaskService_ProcessQueues_Call {
	return &MockTaskService_ProcessQueues_Call{Call: _e.mock.On("ProcessQueues", ctx)}
}

func (_c *MockTaskService_ProcessQueues_Call) Run(run func(ctx context.Context)) *MockTaskService_ProcessQueues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTaskService_ProcessQueues_Call) Return() *MockTaskService_ProcessQueues_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaskService_ProcessQueues_Call) RunAndReturn(run func(context.Context)) *MockTaskService_ProcessQueues_Call {
	_c.Run(run)
	return _c
}

// ProcessScanfs provides a mock function with given fields: ctx, rootDir
func (_m *MockTaskService) ProcessScanfs(ctx context.Context, rootDir string) error {
	ret := _m.Called(ctx, rootDir)

	if len(ret) == 0 {
		panic("no return value specified for ProcessScanfs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, rootDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTaskService_ProcessScanfs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessScanfs'
type MockTaskService_ProcessScanfs_Call struct {
	*mock.Call
}

// ProcessScanfs is a helper method to define mock.On call
//   - ctx context.Context
//   - rootDir string
func (_e *MockTaskService_Expecter) ProcessScanfs(ctx interface{}, rootDir interface{}) *MockTaskService_ProcessScanfs_Call {
	return &MockTaskService_ProcessScanfs_Call{Call: _e.mock.On("ProcessScanfs", ctx, rootDir)}
}

func (_c *MockTaskService_ProcessScanfs_Call) Run(run func(ctx context.Context, rootDir string)) *MockTaskService_ProcessScanfs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTaskService_ProcessScanfs_Call) Return(_a0 error) *MockTaskService_ProcessScanfs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskService_ProcessScanfs_Call) RunAndReturn(run func(context.Context, string) error) *MockTaskService_ProcessScanfs_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with no fields
func (_m *MockTaskService) Shutdown() {
	_m.Called()
}

// MockTaskService_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockTaskService_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *MockTaskService_Expecter) Shutdown() *MockTaskService_Shutdown_Call {
	return &MockTaskService_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *MockTaskService_Shutdown_Call) Run(run func()) *MockTaskService_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaskService_Shutdown_Call) Return() *MockTaskService_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaskService_Shutdown_Call) RunAndReturn(run func()) *MockTaskService_Shutdown_Call {
	_c.Run(run)
	return _c
}

// TryQueueConversion provides a mock function with no fields
func (_m *MockTaskService) TryQueueConversion() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TryQueueConversion")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTaskService_TryQueueConversion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryQueueConversion'
type MockTaskService_TryQueueConversion_Call struct {
	*mock.Call
}

// TryQueueConversion is a helper method to define mock.On call
func (_e *MockTaskService_Expecter) TryQueueConversion() *MockTaskService_TryQueueConversion_Call {
	return &MockTaskService_TryQueueConversion_Call{Call: _e.mock.On("TryQueueConversion")}
}

func (_c *MockTaskService_TryQueueConversion_Call) Run(run func()) *MockTaskService_TryQueueConversion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaskService_TryQueueConversion_Call) Return(_a0 bool) *MockTaskService_TryQueueConversion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskService_TryQueueConversion_Call) RunAndReturn(run func() bool) *MockTaskService_TryQueueConversion_Call {
	_c.Call.Return(run)
	return _c
}

// TryQueueDeletion provides a mock function with no fields
func (_m *MockTaskService) TryQueueDeletion() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TryQueueDeletion")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTaskService_TryQueueDeletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryQueueDeletion'
type MockTaskService_TryQueueDeletion_Call struct {
	*mock.Call
}

// TryQueueDeletion is a helper method to define mock.On call
func (_e *MockTaskService_Expecter) TryQueueDeletion() *MockTaskService_TryQueueDeletion_Call {
	return &MockTaskService_TryQueueDeletion_Call{Call: _e.mock.On("TryQueueDeletion")}
}

func (_c *MockTaskService_TryQueueDeletion_Call) Run(run func()) *MockTaskService_TryQueueDeletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaskService_TryQueueDeletion_Call) Return(_a0 bool) *MockTaskService_TryQueueDeletion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskService_TryQueueDeletion_Call) RunAndReturn(run func() bool) *MockTaskService_TryQueueDeletion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTaskService creates a new instance of MockTaskService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskService {
	mock := &MockTaskService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
